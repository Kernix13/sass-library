@use 'breakpoints';
@use 'sass:math';

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 0.5em,
  "2": 0.75em,
  "3": 1.25em,
);
$layout-values: flex-start, flex-end, center, space-between, space-around, space-evenly;

// base layout classes
.grid-container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.25em;
  box-sizing: border-box;
}

.row {
  display: flex;
  // flex-flow: row wrap;
  flex-wrap: wrap;
}

// grid gaps
@each $key,
$val in $grid-gaps {
  .gap-#{$key}>* {
    padding: $val;
  }

  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// justify content (this should be a map because the class names will be too long)
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes (it would be better to create a mixin for all of these)
@include breakpoints.xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoints.xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}